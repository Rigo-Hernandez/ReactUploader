{"ast":null,"code":"var Busboy = require('busboy');\n\nvar fileFactory = require('./fileFactory');\n\nvar memHandler = require('./memHandler');\n\nvar tempFileHandler = require('./tempFileHandler');\n\nvar processNested = require('./processNested');\n\nvar _require = require('./utilities'),\n    isFunc = _require.isFunc,\n    buildOptions = _require.buildOptions,\n    buildFields = _require.buildFields,\n    parseFileName = _require.parseFileName;\n/**\n * Processes multipart request\n * Builds a req.body object for fields\n * Builds a req.files object for files\n * @param  {Object}   options expressFileupload and Busboy options\n * @param  {Object}   req     Express request object\n * @param  {Object}   res     Express response object\n * @param  {Function} next    Express next method\n * @return {void}\n */\n\n\nmodule.exports = function (options, req, res, next) {\n  req.files = null; // Build busboy options and init busboy instance.\n\n  var busboyOptions = buildOptions(options, {\n    headers: req.headers\n  });\n  var busboy = new Busboy(busboyOptions); // Build multipart req.body fields\n\n  busboy.on('field', function (fieldname, val) {\n    return req.body = buildFields(req.body, fieldname, val);\n  }); // Build req.files fields\n\n  busboy.on('file', function (fieldname, file, filename, encoding, mime) {\n    var _ref = options.useTempFiles ? tempFileHandler(options, fieldname, filename) : memHandler(options, fieldname, filename),\n        dataHandler = _ref.dataHandler,\n        getFilePath = _ref.getFilePath,\n        getFileSize = _ref.getFileSize,\n        getHash = _ref.getHash,\n        complete = _ref.complete,\n        cleanup = _ref.cleanup;\n\n    file.on('limit', function () {\n      // Run user defined limit handler if it has been set.\n      if (isFunc(options.limitHandler)) {\n        return options.limitHandler(req, res, next);\n      } // Close connection with 413 code if abortOnLimit set(default: false).\n\n\n      if (options.abortOnLimit) {\n        res.writeHead(413, {\n          Connection: 'close'\n        });\n        res.end(options.responseOnLimit);\n      }\n    });\n    file.on('data', dataHandler);\n    file.on('end', function () {\n      // Add file instance to the req.files\n      req.files = buildFields(req.files, fieldname, fileFactory({\n        buffer: complete(),\n        name: parseFileName(options, filename),\n        tempFilePath: getFilePath(),\n        size: getFileSize(),\n        hash: getHash(),\n        encoding: encoding,\n        truncated: file.truncated,\n        mimetype: mime\n      }, options));\n    });\n    file.on('error', cleanup, next);\n  });\n  busboy.on('finish', function () {\n    if (options.parseNested) {\n      req.body = processNested(req.body);\n      req.files = processNested(req.files);\n    }\n\n    next();\n  });\n  busboy.on('error', next);\n  req.pipe(busboy);\n};","map":null,"metadata":{},"sourceType":"script"}