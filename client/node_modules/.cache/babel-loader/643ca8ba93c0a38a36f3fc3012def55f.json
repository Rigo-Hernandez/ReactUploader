{"ast":null,"code":"'use strict';\n\nvar _require = require('./utilities'),\n    isFunc = _require.isFunc,\n    promiseCallback = _require.promiseCallback,\n    checkAndMakeDir = _require.checkAndMakeDir,\n    moveFile = _require.moveFile,\n    saveBufferToFile = _require.saveBufferToFile;\n/**\n * Returns Local function that moves the file to a different location on the filesystem\n * which takes two function arguments to make it compatible w/ Promise or Callback APIs\n * @param {String} filePath - destination file path.\n * @param {Object} options\n * @returns {Function}\n */\n\n\nvar moveFromTemp = function moveFromTemp(filePath, options) {\n  return function (resolve, reject) {\n    moveFile(options.tempFilePath, filePath, promiseCallback(resolve, reject));\n  };\n};\n/**\n * Returns Local function that moves the file from buffer to a different location on the filesystem\n * which takes two function arguments to make it compatible w/ Promise or Callback APIs\n * @param {String} filePath - destination file path.\n * @param {Object} options\n * @returns {Function}\n */\n\n\nvar moveFromBuffer = function moveFromBuffer(filePath, options) {\n  return function (resolve, reject) {\n    saveBufferToFile(options.buffer, filePath, promiseCallback(resolve, reject));\n  };\n};\n\nmodule.exports = function (options) {\n  var fileUploadOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // see: https://github.com/richardgirges/express-fileupload/issues/14\n  // firefox uploads empty file in case of cache miss when f5ing page.\n  // resulting in unexpected behavior. if there is no file data, the file is invalid.\n  if (!fileUploadOptions.useTempFiles && !options.buffer.length) return; // Create and return file object.\n\n  return {\n    name: options.name,\n    data: options.buffer,\n    size: options.size,\n    encoding: options.encoding,\n    tempFilePath: options.tempFilePath,\n    truncated: options.truncated,\n    mimetype: options.mimetype,\n    md5: options.hash,\n    mv: function mv(filePath, callback) {\n      // Determine a propper move function.\n      var moveFunc = options.buffer.length && !options.tempFilePath ? moveFromBuffer(filePath, options) : moveFromTemp(filePath, options); // Create a folder for a file.\n\n      checkAndMakeDir(fileUploadOptions, filePath); // If callback is passed in, use the callback API, otherwise return a promise.\n\n      return isFunc(callback) ? moveFunc(callback) : new Promise(moveFunc);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}